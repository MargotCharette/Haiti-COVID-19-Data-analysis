## Create age groups within covid_positive data frame
covid_positive <- covid_positive %>%
mutate(
# Create categories
age_group = case_when(
patient_age <= 10            ~ "0-10",
patient_age > 10 & patient_age <= 25 ~ "11-25",
patient_age > 25 & patient_age <= 40 ~ "26-40",
patient_age > 40 & patient_age <= 55 ~ "41-55",
patient_age > 55 & patient_age <= 70 ~ "56-70",
patient_age > 70             ~ "> 70"
),
# Convert to factor
age_group = factor(
age_group,
level = c("0-10", "11-25", "26-40", "41-55", "56-70", "> 70")
)
)
## Table COVID cases by result (positive, negative, incomplete)
covid_raw %>%                 # covid positive linelist
tabyl(resultat_covid) %>%   # tabulate counts and proportions by covid result type
adorn_pct_formatting() %>%  # convert proportions to percents
adorn_totals()              # add totals (janitor function)
## Table positive COVID cases (lab confirmed) by sex
covid_positive %>%
tabyl(patient_sex) %>%
adorn_pct_formatting()  %>%
adorn_totals()
## Table positive COVID cases by age categories
covid_positive %>%
tabyl(age_group) %>%
adorn_pct_formatting() %>%
adorn_totals()
## Cross-tabulate positive COVID cases by age categories and sex (adding totals and percentages)
covid_positive %>%
tabyl(age_group, patient_sex)
## Cross-tabulate positive COVID cases by age categories and sex (adding totals and percentages)
covid_positive %>%                            # covid-positive linelist
tabyl(age_group, patient_sex) %>%           # cross-tabulate counts
adorn_totals(where = "row") %>%             # add total row
adorn_percentages(denominator = "row") %>%  # convert counts to proportions
adorn_pct_formatting(digits = 1)            # convert proportions to percents
## Cross-tabulate positive COVID cases by age categories and sex (keeping counts AND percentages)
covid_positive %>%                            # covid-positive linelist
tabyl(age_group, patient_sex) %>%           # cross-tabulate counts
adorn_totals(where = "row") %>%             # add total row
adorn_percentages(denominator = "col") %>%  # convert to proportions
adorn_pct_formatting() %>%                  # convert to percents
adorn_ns(position = "front") %>%            # display as: "count (percent)"
adorn_title(                                # adjust titles
row_name = "Age Category",
col_name = "Gender")
## Table positive COVID cases by department
covid_positive %>%
tabyl(dept_resid) %>%
adorn_pct_formatting() %>%                  # convert proportions to percents
adorn_totals(where = "row")                 # add total row
covid_positive %>%
tabyl(age_group, patient_sex) %>%
adorn_totals(where = "col") %>%
adorn_percentages(denominator = "col") %>%
adorn_pct_formatting() %>%
adorn_ns(position = "front") %>%
adorn_title(
row_name = "Age Category",
col_name = "Gender",
placement = "combined") %>% # this is necessary to print as image
flextable::flextable() %>%    # convert to pretty image
flextable::autofit()          # format to one line per row
#Charts
## Bar_graph distribution of cases by department
ggplot(data = covid_positive, mapping = aes(x = dept_resid))+
geom_bar(color = "black") +
labs(title = "Distribution of positive COVID cases by department")
## Histogram age distribution
ggplot(data = covid_positive, mapping = aes(x = patient_age))+      # set data and axes
geom_histogram(                                                   # display histogram
binwidth = 7,                                                   # width of bins
color = "royalblue",                                            # bin line color
fill = "lightblue")+                                            # bin interior color (fill)
labs(title = "Distribution of positive COVID cases by age")
## Bar graph using age groups sub-divided by sex (bar plot, fill to discrete column, color to static value)
ggplot(data = covid_positive, mapping = aes(x = age_group))+
geom_bar(mapping = aes(fill = patient_sex), color = "black")+
scale_fill_manual(                                                # Manually specify fill (bar interior color)
values = c("Masculin" = "turquoise",                            # reference values in data to assign colors
"Feminin" = "violetred")) +
labs(title = "Distribution of positive COVID cases by age categories and sex")
# Epi Curves
##Verify date column is class Date and observe range of values
ggplot(data=covid_positive)+geom_histogram(aes(x=date_notif))
##Epicurves with incidence2 package
##First, create an **incidence object**
epi_day <- incidence(       # create incidence object
x = covid_positive,       # dataset
date_index = date_notif,  # date column
interval = "day"          # date grouping interval
)
summary(epi_day)
##Second, plot the incidence object
plot(epi_day)+      labs(title = "Daily COVID incidence")
##Plot cases weekly
epi_wk <- incidence(covid_positive, date_notif, interval = "Monday week")
plot(epi_wk)+      labs(title = "Weekly COVID incidence")
##Plot cases monthly
epi_month <- incidence(covid_positive, date_notif, interval = "month")
plot(epi_month)+      labs(title = "Monthly COVID incidence")
## Create incidence object, with data grouped by age category
age_outbreak <- incidence(
covid_positive,          # dataset
date_index = date_notif, # date column
interval = "week",       # Monday weekly aggregation of cases
groups = age_group,      # age_group is set as a group
na_as_group = TRUE)      # missing values assigned their own group
## Create incidence object, with data grouped by age category
age_outbreak <- incidence(
covid_positive,          # dataset
date_index = date_notif, # date column
interval = "week",       # Monday weekly aggregation of cases
groups = age_group,      # age_group is set as a group
na_as_group = TRUE)      # missing values assigned their own group
## plot the grouped incidence object
plot(
age_outbreak,               # incidence object with age_cat as group
fill = age_group)+          # age_cat is used for bar fill color (must have been set as a groups column above)
labs(fill = "Age Category") # change legend title from default "age_cat" (this is a ggplot2 modification)
## Create incidence object, with data grouped by department
dept_outbreak <- incidence(
covid_positive,
date_index = date_notif,
interval = "week",
groups = dept_resid,
na_as_group = TRUE)
## plot the grouped incidence object
plot(
dept_outbreak,
fill = dept_resid)+
labs(fill = "Department of residence")
#Facets/small multiples (One epi curve by department - could be done by any other category too)
epi_wks_dept_out <- incidence(
covid_positive,                # dataset
date_index = date_notif,       # date column
interval = "month",            # monthly bars
groups = dept_resid)  # both outcome and department are given as grouping columns
# plot
incidence2::facet_plot(
epi_wks_dept_out,      # incidence object
facets = dept_resid)   # facet column
#Making maps: Choropleth map for incidence by department
##For additional help on this topic, please refer to: https://epirhandbook.com/en/gis-basics.html
## spatial data was obtained from hdx (https://data.humdata.org/dataset/hti-polbndl-adm1-cnigs-zip?force_layout=desktop)
## the admin1 (department) shapefile is saved to this project
admin1_haiti_raw <- read_sf(here("data", "gis", "shp", "admin1_haiti.shp"))
admin2_haiti_raw <- read_sf(here("data", "gis", "shp", "admin2_haiti.shp"))
##Clean ADM 1 dataset
admin1_haiti <- admin1_haiti_raw %>%
clean_names() # standardize column names
names(admin1_haiti)
##Make sure the admin1 names spelling matches thos of COVID dataset as well as population dataset below
admin1_haiti$admin1na_1[admin1_haiti$admin1na_1 =="Grande'Anse" ]<- "Grande Anse"
##Display just the administrative boundaries (polygons)
tm_shape(admin1_haiti) +           # admin boundaries shapefile
tm_polygons(col = "#F7F7F7")+    # show polygons in light grey
tm_borders(col = "#000000",      # show borders with color and line weight
lwd = 2) +
tm_text("admin1na_1")            # column text to display for each polygon
##Import population data by admin 1 (obtained from hdx)
admin1_haiti_pop <- import(here("data", "gis", "population", "population_haiti_admin1.csv")) %>%
clean_names()
##Make new dataframe containing counts of cases by administrative unit
case_dept_resid <- covid_positive %>%      # begin with linelist with new admin cols
as_tibble() %>%                          # convert to tibble for better display
group_by(dept_resid) %>%                 # group by admin unit, both by name and pcode
summarise(cases = n()) %>%               # summarize and count rows
arrange(desc(cases))                     # arrange in descending order
case_dept_resid                            #print to console for view
##Add population data to the dataframe containing counts by administrative unit
case_dept_resid <- case_dept_resid %>%
left_join(admin1_haiti_pop,                              # add columns from pop dataset
by = c("dept_resid" = "admin1na_1")) %>%       # join based on common values across these two columns
select(names(case_dept_resid), population) %>%           # keep only important columns, including total population
mutate(case_10Kpop = round(cases/population * 10000, 3)) # make new column with case rate per 100, rounded to 2 decimals
case_dept_resid                                              #print to console for view
##Join the table with the ADM1 shapefile for mapping
case_dept_resid_sf <- case_dept_resid %>%                       # begin with cases & rate by admin unit
left_join(admin1_haiti, c("dept_resid" = "admin1na_1")) %>%   # join to shapefile data by common column
select(names(case_dept_resid),admin1pcod,admin0name,          # keep only certain columns of interest
admin1pcod,geometry) %>%                               # keep geometry so polygons can be plotted
drop_na(geometry) %>%                                         # drop any empty rows
st_as_sf()                                                    # convert to shapefile
##Map the results
tmap_mode("plot") # view static map
##Map the number of cases by department
tm_shape(case_dept_resid_sf) +
tm_polygons("cases") +  # color by number of cases column
tm_text("dept_resid")   # name display
##Map the number of cases per 10K population
tmap_mode("plot")             # static viewing mode
# plot
tm_shape(case_dept_resid_sf) +          # plot polygons
tm_polygons("case_10Kpop",            # color by column containing case rate
breaks=c(0, 3, 7, 13), # define break points for colors
palette = "Purples"       # use a purple color palette
) +
tm_text("dept_resid")                 # display text
knitr::opts_chunk$set(echo = TRUE)
# This script uses the p_load() function from pacman R package,
# which installs if package is absent, and loads for use if already installed
# The code below ensures the package "pacman" is installed
if (!require("pacman")) install.packages("pacman")
# Packages available from CRAN
##############################
pacman::p_load(
tidyverse,    # data management + ggplot2 graphics (will load core tidyverse packages such as: ggplot2, dplyr, tidyr)
lubridate,    # working with dates/epiweeks
skimr,        # summary stats ov variables in dataset
rio,          # file import/export
here,         # relative filepaths
aweek,        # alternative package for working with dates/epiweeks
incidence2,   # epicurves of linelist data
i2extras,     # supplement to incidence2
stringr,      # search and manipulate character strings
forcats,      # working with factors
RColorBrewer, # Color palettes from colorbrewer2.org
janitor,      # data cleaning and tables
epikit,       # age_categories() function
flextable,    # converting tables to pretty images
rmarkdown,    # produce PDFs, Word Documents, Powerpoints, and HTML files
gtsummary,    # summary statistics and tests
rstatix,      # summary statistics and statistical tests
scales,       # easily convert proportions to percents
# gis
######
sf,             # to manage spatial data using a Simple Feature format
tmap,           # to produce simple maps, works for both interactive and static maps
spdep           # spatial statistics
)
# The here package allows to access data within an R project, and to work with relative paths:
Data_Covid <- import(here("data", "Data_Covid_clean.csv"))
# See the first few records
head(Data_Covid)
# To see the dataset structure and variable types
str(Data_Covid)
# Get an overview of variables content by type
skim(Data_Covid)
## See variables (column) names
names(Data_Covid)
## Clean column names - removing spaces and special characters which are not allowed in R
covid_raw <- Data_Covid %>%
janitor::clean_names() %>%
## add new columns (to have shorter, simpler names and proper dates and integer format)
mutate(date_visite      = as.Date(data_g_notification_date_visite, format="%Y/%m/%d"),
date_notif       = as.Date(data_g_notification_date_notification, format="%Y/%m/%d"),
patient_age      = as.integer(patient_age_years),
patient_type     = data_g_prelevements_defition_cas,
dept_resid       = data_g_patient_departement_residence,
commune_resid    = data_g_patient_commune_residence,
type_prelevement = data_g_prelevements_pathologie,
resultat_covid   = data_g_resultat_resultats_covid_19)
## see the new column names
names(covid_raw)
# include only age values below 110 years
covid_raw <- covid_raw %>%
filter(patient_age<110)
# cleaning up spelling for sex, COVID outcomes and department of residence
covid_raw$patient_sex[covid_raw$patient_sex =="feminin" ]<- "Feminin"
covid_raw$patient_sex[covid_raw$patient_sex =="masculin" ]<- "Masculin"
covid_raw$resultat_covid[covid_raw$resultat_covid =="negatif" ]<- "Negatif"
covid_raw$resultat_covid[covid_raw$resultat_covid =="positif" ]<- "Positif"
covid_raw$dept_resid[covid_raw$dept_resid =="nord" ]<- "Nord"
covid_raw$dept_resid[covid_raw$dept_resid =="ouest" ]<- "Ouest"
covid_raw$dept_resid[covid_raw$dept_resid =="sud" ]<- "Sud"
covid_raw$dept_resid[covid_raw$dept_resid =="nord" ]<- "Nord"
covid_raw$dept_resid[covid_raw$dept_resid =="Nord_Est" ]<- "Nord-Est"
covid_raw$dept_resid[covid_raw$dept_resid =="Nord_Ouest" ]<- "Nord-Ouest"
covid_raw$dept_resid[covid_raw$dept_resid =="Sud_Est" ]<- "Sud-Est"
covid_raw$dept_resid[covid_raw$dept_resid =="Grand_Anse" ]<- "Grande Anse"
#filter COVID positives and save as new data frame
covid_positive <- covid_raw %>%
filter(resultat_covid=="Positif")
## Create age groups within covid_positive data frame
covid_positive <- covid_positive %>%
mutate(
# Create categories
age_group = case_when(
patient_age <= 10            ~ "0-10",
patient_age > 10 & patient_age <= 25 ~ "11-25",
patient_age > 25 & patient_age <= 40 ~ "26-40",
patient_age > 40 & patient_age <= 55 ~ "41-55",
patient_age > 55 & patient_age <= 70 ~ "56-70",
patient_age > 70             ~ "> 70"
),
# Convert to factor
age_group = factor(
age_group,
level = c("0-10", "11-25", "26-40", "41-55", "56-70", "> 70")
)
)
## Table COVID cases by result (positive, negative, incomplete)
covid_raw %>%                # covid positive linelist
tabyl(resultat_covid) %>%  # tabulate counts and proportions by covid result type
adorn_pct_formatting() %>% # convert proportions to percents
adorn_totals()             # add totals (janitor function)
## Table positive COVID cases (lab confirmed) by sex
covid_positive %>%
tabyl(patient_sex) %>%
adorn_pct_formatting()  %>%
adorn_totals()
## Table positive COVID cases by age categories
covid_positive %>%
tabyl(age_group) %>%
adorn_pct_formatting() %>%
adorn_totals()
## Cross-tabulate positive COVID cases by age categories and sex (adding totals and percentages)
covid_positive %>%
tabyl(age_group, patient_sex)
## Cross-tabulate positive COVID cases by age categories and sex (adding totals and percentages)
covid_positive %>%                            # covid-positive linelist
tabyl(age_group, patient_sex) %>%           # cross-tabulate counts
adorn_totals(where = "row") %>%             # add total row
adorn_percentages(denominator = "row") %>%  # convert counts to proportions
adorn_pct_formatting(digits = 1)            # convert proportions to percents
## Cross-tabulate positive COVID cases by age categories and sex (keeping counts AND percentages)
covid_positive %>%                            # covid-positive linelist
tabyl(age_group, patient_sex) %>%           # cross-tabulate counts
adorn_totals(where = "row") %>%             # add total row
adorn_percentages(denominator = "col") %>%  # convert to proportions
adorn_pct_formatting() %>%                  # convert to percents
adorn_ns(position = "front") %>%            # display as: "count (percent)"
adorn_title(                                # adjust titles
row_name = "Age Category",
col_name = "Gender")
## Table positive COVID cases by department
covid_positive %>%
tabyl(dept_resid) %>%
adorn_pct_formatting() %>%                  # convert proportions to percents
adorn_totals(where = "row")                 # add total row
covid_positive %>%
tabyl(age_group, patient_sex) %>%
adorn_totals(where = "col") %>%
adorn_percentages(denominator = "col") %>%
adorn_pct_formatting() %>%
adorn_ns(position = "front") %>%
adorn_title(
row_name = "Age Category",
col_name = "Gender",
placement = "combined") %>% # this is necessary to print as image
flextable::flextable() %>%    # convert to pretty image
flextable::autofit()          # format to one line per row
# Bar_graph distribution of cases by department
ggplot(data = covid_positive, mapping = aes(x = dept_resid))+
geom_bar(color = "black") +
labs(title = "Distribution of positive COVID cases by department")
# Histogram age distribution
ggplot(data = covid_positive, mapping = aes(x = patient_age))+ # set data and axes
geom_histogram(                                              # display histogram
binwidth = 7,                                              # width of bins
color = "royalblue",                                       # bin line color
fill = "lightblue")+                                       # bin interior color (fill)
labs(title = "Distribution of positive COVID cases by age")
# Bar graph using age groups sub-divided by sex (bar plot, fill to discrete column, color to static value)
ggplot(data = covid_positive, mapping = aes(x = age_group))+
geom_bar(mapping = aes(fill = patient_sex), color = "black")+
scale_fill_manual(                  # Manually specify fill (bar interior color)
values = c("Masculin" = "turquoise",# reference values in data to assign colors
"Feminin" = "violetred")) +
labs(title = "Distribution of positive COVID cases by age categories and sex")
# Verify date column is class Date and observe range of values
ggplot(data=covid_positive)+geom_histogram(aes(x=date_notif))
# Epicurves with incidence2 package
# First, create an **incidence object**
epi_day <- incidence(       # create incidence object
x = covid_positive,       # dataset
date_index = date_notif,  # date column
interval = "day"          # date grouping interval
)
summary(epi_day)
# Second, plot the incidence object
plot(epi_day)+      labs(title = "Daily COVID incidence")
# Plot cases weekly
epi_wk <- incidence(covid_positive, date_notif, interval = "Monday week")
plot(epi_wk)+      labs(title = "Weekly COVID incidence")
# Plot cases monthly
epi_month <- incidence(covid_positive, date_notif, interval = "month")
plot(epi_month)+      labs(title = "Monthly COVID incidence")
#Create epi curves with sub-categories
# Create incidence object, with data grouped by age category
age_outbreak <- incidence(
covid_positive,          # dataset
date_index = date_notif, # date column
interval = "week",       # Monday weekly aggregation of cases
groups = age_group,      # age_group is set as a group
na_as_group = TRUE)      # missing values assigned their own group
## plot the grouped incidence object
plot(
age_outbreak,               # incidence object with age_cat as group
fill = age_group)+          # age_cat is used for bar fill color (must have been set as a groups column above)
labs(fill = "Age Category") # change legend title from default "age_cat" (this is a ggplot2 modification)
## Create incidence object, with data grouped by department
dept_outbreak <- incidence(
covid_positive,
date_index = date_notif,
interval = "week",
groups = dept_resid,
na_as_group = TRUE)
## plot the grouped incidence object
plot(
dept_outbreak,
fill = dept_resid)+
labs(fill = "Department of residence")
## Create incidence object, with data grouped by department
dept_outbreak <- incidence(
covid_positive,
date_index = date_notif,
interval = "week",
groups = dept_resid,
na_as_group = TRUE)
## plot the grouped incidence object
plot(
dept_outbreak,
fill = dept_resid)+
labs(fill = "Department of residence")
#Filtered data: To plot the epicurve of a subset of data
##Filter the dataset
Ouest_dept <- covid_positive %>%
filter(dept_resid == "Ouest")
##create incidence object using filtered data
Ouest_dept_outbreak <- incidence(Ouest_dept, date_index = date_notif, interval = "week")
##Plot the incidence object
plot(Ouest_dept_outbreak, title = "Weekly case incidence Ouest department")
#Facets/small multiples (One epi curve by department - could be done by any other category too)
epi_wks_dept_out <- incidence(
covid_positive,                # dataset
date_index = date_notif,       # date column
interval = "month",            # monthly bars
groups = dept_resid)  # both outcome and department are given as grouping columns
# plot
incidence2::facet_plot(
epi_wks_dept_out,      # incidence object
facets = dept_resid)   # facet column
## the admin1 (department) shapefile is saved in the gis folder of this project
admin1_haiti_raw <- read_sf(here("data", "gis", "shp", "admin1_haiti.shp"))
admin2_haiti_raw <- read_sf(here("data", "gis", "shp", "admin2_haiti.shp"))
##Clean ADM 1 dataset
admin1_haiti <- admin1_haiti_raw %>%
clean_names() # standardize column names
names(admin1_haiti)
##Make sure the admin1 names spelling matches thos of COVID dataset as well as population dataset below
admin1_haiti$admin1na_1[admin1_haiti$admin1na_1 =="Grande'Anse" ]<- "Grande Anse"
##Display just the administrative boundaries (polygons)
tm_shape(admin1_haiti) +           # admin boundaries shapefile
tm_polygons(col = "#F7F7F7")+    # show polygons in light grey
tm_borders(col = "#000000",      # show borders with color and line weight
lwd = 2) +
tm_text("admin1na_1")            # column text to display for each polygon
##Import population data by admin 1 (obtained from hdx)
admin1_haiti_pop <- import(here("data", "gis", "population", "population_haiti_admin1.csv")) %>%
clean_names()
##Make new dataframe containing counts of cases by administrative unit
case_dept_resid <- covid_positive %>%      # begin with linelist with new admin cols
as_tibble() %>%                          # convert to tibble for better display
group_by(dept_resid) %>%                 # group by admin unit, both by name and pcode
summarise(cases = n()) %>%               # summarize and count rows
arrange(desc(cases))                     # arrange in descending order
case_dept_resid                            #print to console for view
##Add population data to the dataframe containing counts by administrative unit
case_dept_resid <- case_dept_resid %>%
left_join(admin1_haiti_pop,                              # add columns from pop dataset
by = c("dept_resid" = "admin1na_1")) %>%       # join based on common values across these two columns
select(names(case_dept_resid), population) %>%           # keep only important columns, including total population
mutate(case_10Kpop = round(cases/population * 10000, 3)) # make new column with case rate per 100, rounded to 2 decimals
case_dept_resid                                              #print to console for view
##Join the table with the ADM1 shapefile for mapping
case_dept_resid_sf <- case_dept_resid %>%                       # begin with cases & rate by admin unit
left_join(admin1_haiti, c("dept_resid" = "admin1na_1")) %>%   # join to shapefile data by common column
select(names(case_dept_resid),admin1pcod,admin0name,          # keep only certain columns of interest
admin1pcod,geometry) %>%                               # keep geometry so polygons can be plotted
drop_na(geometry) %>%                                         # drop any empty rows
st_as_sf()                                                    # convert to shapefile
##Map the results
tmap_mode("plot") # view static map
##Map the number of cases by department
tm_shape(case_dept_resid_sf) +
tm_polygons("cases") +  # color by number of cases column
tm_text("dept_resid")   # name display
##Map the number of cases per 10K population
tmap_mode("plot")             # static viewing mode
# plot
tm_shape(case_dept_resid_sf) +          # plot polygons
tm_polygons("case_10Kpop",            # color by column containing case rate
breaks=c(0, 3, 7, 13), # define break points for colors
palette = "Purples"       # use a purple color palette
) +
tm_text("dept_resid")                 # display text
# Bar_graph distribution of cases by department
ggplot(data = covid_positive, mapping = aes(x = dept_resid))+
geom_bar(color = "black") +
labs(title = "Distribution of positive COVID cases by department")
# Histogram age distribution
ggplot(data = covid_positive, mapping = aes(x = patient_age))+ # set data and axes
geom_histogram(                                              # display histogram
binwidth = 7,                                              # width of bins
color = "royalblue",                                       # bin line color
fill = "lightblue")+                                       # bin interior color (fill)
labs(title = "Distribution of positive COVID cases by age")
# Bar graph using age groups sub-divided by sex (bar plot, fill to discrete column, color to static value)
ggplot(data = covid_positive, mapping = aes(x = age_group))+
geom_bar(mapping = aes(fill = patient_sex), color = "black")+
scale_fill_manual(                  # Manually specify fill (bar interior color)
values = c("Masculin" = "turquoise",# reference values in data to assign colors
"Feminin" = "violetred")) +
labs(title = "Distribution of positive COVID cases by age categories and sex")
